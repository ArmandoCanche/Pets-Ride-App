import {
  Logout_default,
  MoreVert_default
} from "./chunk-SG4EEVEW.js";
import {
  AuthenticationContext,
  SessionContext,
  useLocaleText
} from "./chunk-IFA5N44U.js";
import {
  Avatar_default,
  Button_default,
  Divider_default,
  Popover_default,
  Stack_default,
  Tooltip_default
} from "./chunk-I7UDPFAM.js";
import {
  IconButton_default
} from "./chunk-RLDNC3L4.js";
import {
  Box_default
} from "./chunk-DCVPL4XM.js";
import {
  Typography_default
} from "./chunk-EP3CH4EC.js";
import {
  require_prop_types
} from "./chunk-U3AYJTN3.js";
import {
  require_jsx_runtime
} from "./chunk-JNNNAK6O.js";
import {
  require_react
} from "./chunk-HSUUC2QV.js";
import {
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/@toolpad/core/esm/Account/Account.js
var React7 = __toESM(require_react(), 1);
var import_prop_types6 = __toESM(require_prop_types(), 1);

// node_modules/@toolpad/core/esm/Account/SignInButton.js
var React2 = __toESM(require_react(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);

// node_modules/@toolpad/core/esm/Account/AccountLocaleContext.js
var React = __toESM(require_react(), 1);
var AccountLocaleContext = React.createContext(null);

// node_modules/@toolpad/core/esm/Account/SignInButton.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
function SignInButton(props) {
  const authentication = React2.useContext(AuthenticationContext);
  const globalLocaleText = useLocaleText();
  const accountLocaleText = React2.useContext(AccountLocaleContext);
  const localeText = {
    ...globalLocaleText,
    ...accountLocaleText
  };
  return (0, import_jsx_runtime.jsx)(Button_default, {
    disableElevation: true,
    variant: "contained",
    size: "small",
    onClick: authentication == null ? void 0 : authentication.signIn,
    sx: {
      textTransform: "capitalize",
      filter: "opacity(0.9)",
      width: "50%",
      margin: (theme) => `${theme.spacing(1)} auto`,
      transition: "filter 0.2s ease-in",
      "&:hover": {
        filter: "opacity(1)"
      }
    },
    ...props,
    children: localeText == null ? void 0 : localeText.accountSignInLabel
  });
}
true ? SignInButton.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types.default.node
} : void 0;

// node_modules/@toolpad/core/esm/Account/SignOutButton.js
var React3 = __toESM(require_react(), 1);
var import_prop_types2 = __toESM(require_prop_types(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var _LogoutIcon;
function SignOutButton(props) {
  const authentication = React3.useContext(AuthenticationContext);
  const globalLocaleText = useLocaleText();
  const accountLocaleText = React3.useContext(AccountLocaleContext);
  const localeText = {
    ...globalLocaleText,
    ...accountLocaleText
  };
  return (0, import_jsx_runtime2.jsx)(Button_default, {
    disabled: !authentication,
    variant: "outlined",
    size: "small",
    disableElevation: true,
    onClick: authentication == null ? void 0 : authentication.signOut,
    sx: {
      textTransform: "capitalize",
      fontWeight: "normal",
      filter: "opacity(0.9)",
      transition: "filter 0.2s ease-in",
      "&:hover": {
        filter: "opacity(1)"
      }
    },
    startIcon: _LogoutIcon || (_LogoutIcon = (0, import_jsx_runtime2.jsx)(Logout_default, {})),
    ...props,
    children: localeText == null ? void 0 : localeText.accountSignOutLabel
  });
}
true ? SignOutButton.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types2.default.node
} : void 0;

// node_modules/@toolpad/core/esm/Account/AccountPreview.js
var React4 = __toESM(require_react(), 1);
var import_prop_types3 = __toESM(require_prop_types(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var _MoreVertIcon;
function AccountPreview(props) {
  var _a, _b, _c, _d, _e, _f, _g;
  const {
    slots,
    variant = "condensed",
    slotProps,
    open,
    handleClick,
    sx
  } = props;
  const session = React4.useContext(SessionContext);
  const globalLocaleText = useLocaleText();
  const accountLocaleText = React4.useContext(AccountLocaleContext);
  const localeText = {
    ...globalLocaleText,
    ...accountLocaleText
  };
  if (!session || !session.user) {
    return null;
  }
  const avatarContent = (slots == null ? void 0 : slots.avatar) ? (0, import_jsx_runtime3.jsx)(slots.avatar, {}) : (0, import_jsx_runtime3.jsx)(Avatar_default, {
    src: ((_a = session.user) == null ? void 0 : _a.image) || "",
    alt: ((_b = session.user) == null ? void 0 : _b.name) || ((_c = session.user) == null ? void 0 : _c.email) || "",
    sx: {
      height: variant === "expanded" ? 48 : 32,
      width: variant === "expanded" ? 48 : 32
    },
    ...slotProps == null ? void 0 : slotProps.avatar
  });
  if (variant === "expanded") {
    return (0, import_jsx_runtime3.jsxs)(Stack_default, {
      direction: "row",
      justifyContent: "space-between",
      sx: {
        py: 1,
        px: 2,
        gap: 2,
        ...sx
      },
      children: [(0, import_jsx_runtime3.jsxs)(Stack_default, {
        direction: "row",
        justifyContent: "flex-start",
        spacing: 2,
        overflow: "hidden",
        children: [avatarContent, (0, import_jsx_runtime3.jsxs)(Stack_default, {
          direction: "column",
          justifyContent: "space-evenly",
          overflow: "hidden",
          children: [(0, import_jsx_runtime3.jsx)(Typography_default, {
            variant: "body2",
            fontWeight: "bolder",
            noWrap: true,
            children: (_d = session.user) == null ? void 0 : _d.name
          }), (0, import_jsx_runtime3.jsx)(Typography_default, {
            variant: "caption",
            noWrap: true,
            children: (_e = session.user) == null ? void 0 : _e.email
          })]
        })]
      }), handleClick && ((slots == null ? void 0 : slots.moreIconButton) ? (0, import_jsx_runtime3.jsx)(slots.moreIconButton, {}) : (0, import_jsx_runtime3.jsx)(IconButton_default, {
        size: "small",
        onClick: handleClick,
        ...slotProps == null ? void 0 : slotProps.moreIconButton,
        sx: {
          alignSelf: "center",
          ...(_f = slotProps == null ? void 0 : slotProps.moreIconButton) == null ? void 0 : _f.sx
        },
        children: _MoreVertIcon || (_MoreVertIcon = (0, import_jsx_runtime3.jsx)(MoreVert_default, {
          fontSize: "small"
        }))
      }))]
    });
  }
  return (0, import_jsx_runtime3.jsx)(Tooltip_default, {
    title: session.user.name ?? (accountLocaleText == null ? void 0 : accountLocaleText.accountPreviewTitle),
    children: (slots == null ? void 0 : slots.avatarIconButton) ? (0, import_jsx_runtime3.jsx)(slots.avatarIconButton, {
      ...slotProps == null ? void 0 : slotProps.avatarIconButton
    }) : (0, import_jsx_runtime3.jsx)(Stack_default, {
      sx: {
        py: 0.5,
        ...sx
      },
      children: (0, import_jsx_runtime3.jsx)(IconButton_default, {
        onClick: handleClick,
        "aria-label": localeText == null ? void 0 : localeText.accountPreviewIconButtonLabel,
        size: "small",
        "aria-controls": open ? "account-menu" : void 0,
        "aria-haspopup": "true",
        "aria-expanded": open ? "true" : void 0,
        ...slotProps == null ? void 0 : slotProps.avatarIconButton,
        sx: {
          width: "fit-content",
          margin: "0 auto",
          ...(_g = slotProps == null ? void 0 : slotProps.avatarIconButton) == null ? void 0 : _g.sx
        },
        children: avatarContent
      })
    })
  });
}
true ? AccountPreview.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The handler used when the preview is expanded
   */
  handleClick: import_prop_types3.default.func,
  /**
   * The state of the Account popover
   * @default false
   */
  open: import_prop_types3.default.bool,
  /**
   * The props used for each slot inside.
   */
  slotProps: import_prop_types3.default.shape({
    avatar: import_prop_types3.default.object,
    avatarIconButton: import_prop_types3.default.object,
    moreIconButton: import_prop_types3.default.object
  }),
  /**
   * The components used for each slot inside.
   */
  slots: import_prop_types3.default.shape({
    avatar: import_prop_types3.default.elementType,
    avatarIconButton: import_prop_types3.default.elementType,
    moreIconButton: import_prop_types3.default.elementType
  }),
  /**
   * The prop used to customize the styling of the preview
   */
  sx: import_prop_types3.default.oneOfType([import_prop_types3.default.arrayOf(import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object, import_prop_types3.default.bool])), import_prop_types3.default.func, import_prop_types3.default.object]),
  /**
   * The type of account details to display.
   * @property {'condensed'} condensed - Shows only the user's avatar.
   * @property {'expanded'} expanded - Displays the user's avatar, name, and email if available.
   * @default 'condensed'
   */
  variant: import_prop_types3.default.oneOf(["condensed", "expanded"])
} : void 0;

// node_modules/@toolpad/core/esm/Account/AccountPopoverHeader.js
var React5 = __toESM(require_react(), 1);
var import_prop_types4 = __toESM(require_prop_types(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
function AccountPopoverHeader(props) {
  const {
    children,
    ...rest
  } = props;
  return (0, import_jsx_runtime4.jsx)(Stack_default, {
    ...rest,
    children
  });
}
true ? AccountPopoverHeader.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types4.default.node
} : void 0;

// node_modules/@toolpad/core/esm/Account/AccountPopoverFooter.js
var React6 = __toESM(require_react(), 1);
var import_prop_types5 = __toESM(require_prop_types(), 1);
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
function AccountPopoverFooter(props) {
  const {
    children,
    ...rest
  } = props;
  return (0, import_jsx_runtime5.jsx)(Box_default, {
    ...rest,
    sx: {
      display: "flex",
      flexDirection: "row",
      p: 1,
      justifyContent: "flex-end",
      ...rest.sx
    },
    children
  });
}
true ? AccountPopoverFooter.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types5.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types5.default.oneOfType([import_prop_types5.default.arrayOf(import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object, import_prop_types5.default.bool])), import_prop_types5.default.func, import_prop_types5.default.object])
} : void 0;

// node_modules/@toolpad/core/esm/Account/Account.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var _AccountPopoverHeader;
var _Divider;
var defaultAccountLocaleText = {
  accountPreviewIconButtonLabel: "Current User",
  accountPreviewTitle: "Account",
  accountSignInLabel: "Sign in",
  accountSignOutLabel: "Sign out"
};
function Account(props) {
  var _a;
  const {
    localeText: propsLocaleText
  } = props;
  const globalLocaleText = useLocaleText();
  const localeText = React7.useMemo(() => ({
    ...defaultAccountLocaleText,
    ...globalLocaleText,
    ...propsLocaleText
  }), [globalLocaleText, propsLocaleText]);
  const {
    slots,
    slotProps
  } = props;
  const [anchorEl, setAnchorEl] = React7.useState(null);
  const session = React7.useContext(SessionContext);
  const authentication = React7.useContext(AuthenticationContext);
  const open = Boolean(anchorEl);
  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  if (!authentication) {
    return null;
  }
  let accountContent = null;
  if (!(session == null ? void 0 : session.user)) {
    accountContent = (slots == null ? void 0 : slots.signInButton) ? (0, import_jsx_runtime6.jsx)(slots.signInButton, {
      onClick: authentication.signIn
    }) : (0, import_jsx_runtime6.jsx)(SignInButton, {
      ...slotProps == null ? void 0 : slotProps.signInButton
    });
  } else {
    accountContent = (0, import_jsx_runtime6.jsxs)(React7.Fragment, {
      children: [(slots == null ? void 0 : slots.preview) ? (0, import_jsx_runtime6.jsx)(slots.preview, {
        handleClick,
        open
      }) : (0, import_jsx_runtime6.jsx)(AccountPreview, {
        variant: "condensed",
        handleClick,
        open,
        ...slotProps == null ? void 0 : slotProps.preview
      }), (slots == null ? void 0 : slots.popover) ? (0, import_jsx_runtime6.jsx)(slots.popover, {
        open,
        onClick: handleClick,
        onClose: handleClose,
        ...slotProps == null ? void 0 : slotProps.popover
      }) : (0, import_jsx_runtime6.jsx)(Popover_default, {
        anchorEl,
        id: "account-menu",
        open,
        onClose: handleClose,
        onClick: handleClose,
        transformOrigin: {
          horizontal: "right",
          vertical: "top"
        },
        anchorOrigin: {
          horizontal: "right",
          vertical: "bottom"
        },
        ...slotProps == null ? void 0 : slotProps.popover,
        slotProps: {
          paper: {
            elevation: 0,
            sx: {
              overflow: "visible",
              filter: (theme) => `drop-shadow(0px 2px 8px ${theme.palette.mode === "dark" ? "rgba(255,255,255,0.10)" : "rgba(0,0,0,0.32)"})`,
              mt: 1,
              "&::before": {
                content: '""',
                display: "block",
                position: "absolute",
                top: 0,
                right: 14,
                width: 10,
                height: 10,
                bgcolor: "background.paper",
                transform: "translateY(-50%) rotate(45deg)",
                zIndex: 0
              }
            }
          },
          ...(_a = slotProps == null ? void 0 : slotProps.popover) == null ? void 0 : _a.slotProps
        },
        children: (slots == null ? void 0 : slots.popoverContent) ? (0, import_jsx_runtime6.jsx)(slots.popoverContent, {
          ...slotProps == null ? void 0 : slotProps.popoverContent
        }) : (0, import_jsx_runtime6.jsxs)(Stack_default, {
          direction: "column",
          ...slotProps == null ? void 0 : slotProps.popoverContent,
          children: [_AccountPopoverHeader || (_AccountPopoverHeader = (0, import_jsx_runtime6.jsx)(AccountPopoverHeader, {
            children: (0, import_jsx_runtime6.jsx)(AccountPreview, {
              variant: "expanded"
            })
          })), _Divider || (_Divider = (0, import_jsx_runtime6.jsx)(Divider_default, {})), (0, import_jsx_runtime6.jsx)(AccountPopoverFooter, {
            children: (0, import_jsx_runtime6.jsx)(SignOutButton, {
              ...slotProps == null ? void 0 : slotProps.signOutButton
            })
          })]
        })
      })]
    });
  }
  return (0, import_jsx_runtime6.jsx)(AccountLocaleContext.Provider, {
    value: localeText,
    children: accountContent
  });
}
true ? Account.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The labels for the account component.
   */
  localeText: import_prop_types6.default.object,
  /**
   * The props used for each slot inside.
   */
  slotProps: import_prop_types6.default.shape({
    popover: import_prop_types6.default.object,
    popoverContent: import_prop_types6.default.object,
    preview: import_prop_types6.default.shape({
      handleClick: import_prop_types6.default.func,
      open: import_prop_types6.default.bool,
      slotProps: import_prop_types6.default.shape({
        avatar: import_prop_types6.default.object,
        avatarIconButton: import_prop_types6.default.object,
        moreIconButton: import_prop_types6.default.object
      }),
      slots: import_prop_types6.default.shape({
        avatar: import_prop_types6.default.elementType,
        avatarIconButton: import_prop_types6.default.elementType,
        moreIconButton: import_prop_types6.default.elementType
      }),
      sx: import_prop_types6.default.oneOfType([import_prop_types6.default.arrayOf(import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object, import_prop_types6.default.bool])), import_prop_types6.default.func, import_prop_types6.default.object]),
      variant: import_prop_types6.default.oneOf(["condensed", "expanded"])
    }),
    signInButton: import_prop_types6.default.object,
    signOutButton: import_prop_types6.default.object
  }),
  /**
   * The components used for each slot inside.
   */
  slots: import_prop_types6.default.shape({
    popover: import_prop_types6.default.elementType,
    popoverContent: import_prop_types6.default.elementType,
    preview: import_prop_types6.default.elementType,
    signInButton: import_prop_types6.default.elementType,
    signOutButton: import_prop_types6.default.elementType
  })
} : void 0;

export {
  SignInButton,
  SignOutButton,
  AccountPreview,
  AccountPopoverHeader,
  AccountPopoverFooter,
  Account
};
//# sourceMappingURL=chunk-DMABK7ZR.js.map
